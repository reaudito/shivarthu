// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use host::accounts_hash::keypair_func;
use methods::{GUEST_ANONYMOUS_ACCOUNT_ELF, GUEST_ANONYMOUS_ACCOUNT_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use std::time::{Instant, SystemTime};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let start_time = SystemTime::now();
    println!("Start Time: {:?}", start_time);

    let start = Instant::now();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    let account_data = keypair_func();

    println!("image id: {:?}", GUEST_ANONYMOUS_ACCOUNT_ID);

    let env = ExecutorEnv::builder()
        .write(&account_data)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, GUEST_ANONYMOUS_ACCOUNT_ELF).unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let (output, password_hash): ([u8; 32], [u8; 32]) = receipt.journal.decode().unwrap();

    println!("output: {:?}", output);

    println!("password hash: {:?}", password_hash);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(GUEST_ANONYMOUS_ACCOUNT_ID).unwrap();

    println!("image id: {:?}", GUEST_ANONYMOUS_ACCOUNT_ID);

    let duration = start.elapsed();

    // Get the end time (system time)
    let end_time = SystemTime::now();
    println!("End Time: {:?}", end_time);

    // Print the total elapsed time
    println!("Total Execution Time: {:?}", duration);
}
