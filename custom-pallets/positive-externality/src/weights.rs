
//! Autogenerated weights for `pallet_positive_externality`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-10-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `amiya`, CPU: `12th Gen Intel(R) Core(TM) i7-12650H`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --wasm-execution
// compiled
// --pallet
// pallet-positive-externality
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// custom-pallets/positive-externality/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_positive_externality`.
pub trait WeightInfo {
	fn create_positive_externality_post() -> Weight;
	fn set_validate_positive_externality() -> Weight;
	fn apply_staking_period() -> Weight;
	fn apply_jurors() -> Weight;
	fn pass_period() -> Weight;
	fn draw_jurors() -> Weight;
	fn commit_vote() -> Weight;
	fn reveal_vote() -> Weight;
	fn add_incentive_count() -> Weight;
}

/// Weights for `pallet_positive_externality` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `PositiveExternality::NextPostId` (r:1 w:1)
	/// Proof: `PositiveExternality::NextPostId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `PositiveExternality::Evidence` (r:1 w:1)
	/// Proof: `PositiveExternality::Evidence` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PositiveExternality::PostById` (r:0 w:1)
	/// Proof: `PositiveExternality::PostById` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_positive_externality_post() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12`
		//  Estimated: `3477`
		// Minimum execution time: 8_766_000 picoseconds.
		Weight::from_parts(9_335_000, 3477)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `PositiveExternality::Validate` (r:0 w:1)
	/// Proof: `PositiveExternality::Validate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_validate_positive_externality() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_998_000 picoseconds.
		Weight::from_parts(3_050_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `PositiveExternality::Validate` (r:1 w:0)
	/// Proof: `PositiveExternality::Validate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `PositiveExternality::ValidationBlock` (r:1 w:1)
	/// Proof: `PositiveExternality::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:1)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SortitionSumGame::SortitionSumTrees` (r:1 w:1)
	/// Proof: `SortitionSumGame::SortitionSumTrees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::StakingStartTime` (r:0 w:1)
	/// Proof: `SchellingGameShared::StakingStartTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PositiveExternality::StakeBalance` (r:0 w:1)
	/// Proof: `PositiveExternality::StakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn apply_staking_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `220`
		//  Estimated: `3685`
		// Minimum execution time: 35_061_000 picoseconds.
		Weight::from_parts(36_650_000, 3685)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `PositiveExternality::Validate` (r:1 w:0)
	/// Proof: `PositiveExternality::Validate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PositiveExternality::StakeBalance` (r:1 w:0)
	/// Proof: `PositiveExternality::StakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PositiveExternality::ValidationBlock` (r:1 w:0)
	/// Proof: `PositiveExternality::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `SortitionSumGame::SortitionSumTrees` (r:1 w:1)
	/// Proof: `SortitionSumGame::SortitionSumTrees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn apply_jurors() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `584`
		//  Estimated: `4049`
		// Minimum execution time: 43_066_000 picoseconds.
		Weight::from_parts(45_135_000, 4049)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `PositiveExternality::ValidationBlock` (r:1 w:0)
	/// Proof: `PositiveExternality::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:1)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::StakingStartTime` (r:1 w:0)
	/// Proof: `SchellingGameShared::StakingStartTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn pass_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `3816`
		// Minimum execution time: 20_911_000 picoseconds.
		Weight::from_parts(22_268_000, 3816)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `PositiveExternality::ValidationBlock` (r:1 w:0)
	/// Proof: `PositiveExternality::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::DrawsInRound` (r:1 w:1)
	/// Proof: `SchellingGameShared::DrawsInRound` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::Nonce` (r:1 w:1)
	/// Proof: `SchellingGameShared::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `RandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `RandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `SortitionSumGame::SortitionSumTrees` (r:1 w:1)
	/// Proof: `SortitionSumGame::SortitionSumTrees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::DrawnJurors` (r:1 w:1)
	/// Proof: `SchellingGameShared::DrawnJurors` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn draw_jurors() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `184048`
		//  Estimated: `187513`
		// Minimum execution time: 3_367_289_000 picoseconds.
		Weight::from_parts(3_474_402_000, 187513)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `PositiveExternality::ValidationBlock` (r:1 w:0)
	/// Proof: `PositiveExternality::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::DrawnJurors` (r:1 w:0)
	/// Proof: `SchellingGameShared::DrawnJurors` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::ScoreVoteCommits` (r:0 w:1)
	/// Proof: `SchellingGameShared::ScoreVoteCommits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn commit_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `682`
		//  Estimated: `4147`
		// Minimum execution time: 22_471_000 picoseconds.
		Weight::from_parts(23_631_000, 4147)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `PositiveExternality::ValidationBlock` (r:1 w:0)
	/// Proof: `PositiveExternality::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::ScoreVoteCommits` (r:1 w:1)
	/// Proof: `SchellingGameShared::ScoreVoteCommits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::RevealScoreValues` (r:1 w:1)
	/// Proof: `SchellingGameShared::RevealScoreValues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn reveal_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `789`
		//  Estimated: `4254`
		// Minimum execution time: 31_535_000 picoseconds.
		Weight::from_parts(32_502_000, 4254)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `PositiveExternality::ValidationBlock` (r:1 w:0)
	/// Proof: `PositiveExternality::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::IncentiveMeanRevealScore` (r:1 w:0)
	/// Proof: `SchellingGameShared::IncentiveMeanRevealScore` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::DrawnJurors` (r:1 w:0)
	/// Proof: `SchellingGameShared::DrawnJurors` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::ScoreVoteCommits` (r:1 w:0)
	/// Proof: `SchellingGameShared::ScoreVoteCommits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::IncentiveAddedToCount` (r:1 w:1)
	/// Proof: `SchellingGameShared::IncentiveAddedToCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PositiveExternality::IncentiveCount` (r:1 w:1)
	/// Proof: `PositiveExternality::IncentiveCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn add_incentive_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1081`
		//  Estimated: `4546`
		// Minimum execution time: 39_797_000 picoseconds.
		Weight::from_parts(41_242_000, 4546)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `PositiveExternality::NextPostId` (r:1 w:1)
	/// Proof: `PositiveExternality::NextPostId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `PositiveExternality::Evidence` (r:1 w:1)
	/// Proof: `PositiveExternality::Evidence` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PositiveExternality::PostById` (r:0 w:1)
	/// Proof: `PositiveExternality::PostById` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_positive_externality_post() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12`
		//  Estimated: `3477`
		// Minimum execution time: 8_766_000 picoseconds.
		Weight::from_parts(9_335_000, 3477)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `PositiveExternality::Validate` (r:0 w:1)
	/// Proof: `PositiveExternality::Validate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_validate_positive_externality() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_998_000 picoseconds.
		Weight::from_parts(3_050_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `PositiveExternality::Validate` (r:1 w:0)
	/// Proof: `PositiveExternality::Validate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `PositiveExternality::ValidationBlock` (r:1 w:1)
	/// Proof: `PositiveExternality::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:1)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SortitionSumGame::SortitionSumTrees` (r:1 w:1)
	/// Proof: `SortitionSumGame::SortitionSumTrees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::StakingStartTime` (r:0 w:1)
	/// Proof: `SchellingGameShared::StakingStartTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PositiveExternality::StakeBalance` (r:0 w:1)
	/// Proof: `PositiveExternality::StakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn apply_staking_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `220`
		//  Estimated: `3685`
		// Minimum execution time: 35_061_000 picoseconds.
		Weight::from_parts(36_650_000, 3685)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `PositiveExternality::Validate` (r:1 w:0)
	/// Proof: `PositiveExternality::Validate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PositiveExternality::StakeBalance` (r:1 w:0)
	/// Proof: `PositiveExternality::StakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PositiveExternality::ValidationBlock` (r:1 w:0)
	/// Proof: `PositiveExternality::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `SortitionSumGame::SortitionSumTrees` (r:1 w:1)
	/// Proof: `SortitionSumGame::SortitionSumTrees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn apply_jurors() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `584`
		//  Estimated: `4049`
		// Minimum execution time: 43_066_000 picoseconds.
		Weight::from_parts(45_135_000, 4049)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `PositiveExternality::ValidationBlock` (r:1 w:0)
	/// Proof: `PositiveExternality::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:1)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::StakingStartTime` (r:1 w:0)
	/// Proof: `SchellingGameShared::StakingStartTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn pass_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `3816`
		// Minimum execution time: 20_911_000 picoseconds.
		Weight::from_parts(22_268_000, 3816)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `PositiveExternality::ValidationBlock` (r:1 w:0)
	/// Proof: `PositiveExternality::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::DrawsInRound` (r:1 w:1)
	/// Proof: `SchellingGameShared::DrawsInRound` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::Nonce` (r:1 w:1)
	/// Proof: `SchellingGameShared::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `RandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `RandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `SortitionSumGame::SortitionSumTrees` (r:1 w:1)
	/// Proof: `SortitionSumGame::SortitionSumTrees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::DrawnJurors` (r:1 w:1)
	/// Proof: `SchellingGameShared::DrawnJurors` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn draw_jurors() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `184048`
		//  Estimated: `187513`
		// Minimum execution time: 3_367_289_000 picoseconds.
		Weight::from_parts(3_474_402_000, 187513)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `PositiveExternality::ValidationBlock` (r:1 w:0)
	/// Proof: `PositiveExternality::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::DrawnJurors` (r:1 w:0)
	/// Proof: `SchellingGameShared::DrawnJurors` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::ScoreVoteCommits` (r:0 w:1)
	/// Proof: `SchellingGameShared::ScoreVoteCommits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn commit_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `682`
		//  Estimated: `4147`
		// Minimum execution time: 22_471_000 picoseconds.
		Weight::from_parts(23_631_000, 4147)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `PositiveExternality::ValidationBlock` (r:1 w:0)
	/// Proof: `PositiveExternality::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::ScoreVoteCommits` (r:1 w:1)
	/// Proof: `SchellingGameShared::ScoreVoteCommits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::RevealScoreValues` (r:1 w:1)
	/// Proof: `SchellingGameShared::RevealScoreValues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn reveal_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `789`
		//  Estimated: `4254`
		// Minimum execution time: 31_535_000 picoseconds.
		Weight::from_parts(32_502_000, 4254)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `PositiveExternality::ValidationBlock` (r:1 w:0)
	/// Proof: `PositiveExternality::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::IncentiveMeanRevealScore` (r:1 w:0)
	/// Proof: `SchellingGameShared::IncentiveMeanRevealScore` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::DrawnJurors` (r:1 w:0)
	/// Proof: `SchellingGameShared::DrawnJurors` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::ScoreVoteCommits` (r:1 w:0)
	/// Proof: `SchellingGameShared::ScoreVoteCommits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::IncentiveAddedToCount` (r:1 w:1)
	/// Proof: `SchellingGameShared::IncentiveAddedToCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PositiveExternality::IncentiveCount` (r:1 w:1)
	/// Proof: `PositiveExternality::IncentiveCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn add_incentive_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1081`
		//  Estimated: `4546`
		// Minimum execution time: 39_797_000 picoseconds.
		Weight::from_parts(41_242_000, 4546)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
