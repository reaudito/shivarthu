
//! Autogenerated weights for `pallet_department_funding`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-10-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `amiya`, CPU: `12th Gen Intel(R) Core(TM) i7-12650H`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --wasm-execution
// compiled
// --pallet
// pallet-department-funding
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// custom-pallets/department-funding/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_department_funding`.
pub trait WeightInfo {
	fn create_department_required_fund() -> Weight;
	fn apply_staking_period() -> Weight;
	fn apply_jurors() -> Weight;
	fn pass_period() -> Weight;
	fn draw_jurors() -> Weight;
	fn commit_vote() -> Weight;
}

/// Weights for `pallet_department_funding` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Departments::Departments` (r:1 w:0)
	/// Proof: `Departments::Departments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DepartmentFunding::NextDepartmentRequiredFundId` (r:1 w:1)
	/// Proof: `DepartmentFunding::NextDepartmentRequiredFundId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `DepartmentFunding::DepartmentRequiredFunds` (r:0 w:1)
	/// Proof: `DepartmentFunding::DepartmentRequiredFunds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_department_required_fund() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `345`
		//  Estimated: `3810`
		// Minimum execution time: 26_489_000 picoseconds.
		Weight::from_parts(29_241_000, 3810)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `DepartmentFunding::DepartmentRequiredFunds` (r:1 w:0)
	/// Proof: `DepartmentFunding::DepartmentRequiredFunds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DepartmentFunding::DepartmentFundingStatusForDepartmentId` (r:1 w:1)
	/// Proof: `DepartmentFunding::DepartmentFundingStatusForDepartmentId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:1)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SortitionSumGame::SortitionSumTrees` (r:1 w:1)
	/// Proof: `SortitionSumGame::SortitionSumTrees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::StakingStartTime` (r:0 w:1)
	/// Proof: `SchellingGameShared::StakingStartTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DepartmentFunding::ValidationBlock` (r:0 w:1)
	/// Proof: `DepartmentFunding::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn apply_staking_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `306`
		//  Estimated: `3771`
		// Minimum execution time: 27_247_000 picoseconds.
		Weight::from_parts(28_378_000, 3771)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `DepartmentFunding::ValidationBlock` (r:1 w:0)
	/// Proof: `DepartmentFunding::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `SortitionSumGame::SortitionSumTrees` (r:1 w:1)
	/// Proof: `SortitionSumGame::SortitionSumTrees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn apply_jurors() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `3908`
		// Minimum execution time: 36_855_000 picoseconds.
		Weight::from_parts(39_169_000, 3908)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `DepartmentFunding::ValidationBlock` (r:1 w:0)
	/// Proof: `DepartmentFunding::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:1)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::StakingStartTime` (r:1 w:0)
	/// Proof: `SchellingGameShared::StakingStartTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn pass_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `282`
		//  Estimated: `3747`
		// Minimum execution time: 20_613_000 picoseconds.
		Weight::from_parts(21_229_000, 3747)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `DepartmentFunding::ValidationBlock` (r:1 w:0)
	/// Proof: `DepartmentFunding::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::DrawsInRound` (r:1 w:1)
	/// Proof: `SchellingGameShared::DrawsInRound` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::Nonce` (r:1 w:1)
	/// Proof: `SchellingGameShared::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `RandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `RandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `SortitionSumGame::SortitionSumTrees` (r:1 w:1)
	/// Proof: `SortitionSumGame::SortitionSumTrees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::DrawnJurors` (r:1 w:1)
	/// Proof: `SchellingGameShared::DrawnJurors` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn draw_jurors() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2734`
		//  Estimated: `6199`
		// Minimum execution time: 163_900_000 picoseconds.
		Weight::from_parts(170_151_000, 6199)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `DepartmentFunding::ValidationBlock` (r:1 w:0)
	/// Proof: `DepartmentFunding::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::DrawnJurors` (r:1 w:0)
	/// Proof: `SchellingGameShared::DrawnJurors` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::VoteCommits` (r:0 w:1)
	/// Proof: `SchellingGameShared::VoteCommits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn commit_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `613`
		//  Estimated: `4078`
		// Minimum execution time: 22_024_000 picoseconds.
		Weight::from_parts(22_581_000, 4078)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Departments::Departments` (r:1 w:0)
	/// Proof: `Departments::Departments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DepartmentFunding::NextDepartmentRequiredFundId` (r:1 w:1)
	/// Proof: `DepartmentFunding::NextDepartmentRequiredFundId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `DepartmentFunding::DepartmentRequiredFunds` (r:0 w:1)
	/// Proof: `DepartmentFunding::DepartmentRequiredFunds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_department_required_fund() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `345`
		//  Estimated: `3810`
		// Minimum execution time: 26_489_000 picoseconds.
		Weight::from_parts(29_241_000, 3810)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `DepartmentFunding::DepartmentRequiredFunds` (r:1 w:0)
	/// Proof: `DepartmentFunding::DepartmentRequiredFunds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DepartmentFunding::DepartmentFundingStatusForDepartmentId` (r:1 w:1)
	/// Proof: `DepartmentFunding::DepartmentFundingStatusForDepartmentId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:1)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SortitionSumGame::SortitionSumTrees` (r:1 w:1)
	/// Proof: `SortitionSumGame::SortitionSumTrees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::StakingStartTime` (r:0 w:1)
	/// Proof: `SchellingGameShared::StakingStartTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DepartmentFunding::ValidationBlock` (r:0 w:1)
	/// Proof: `DepartmentFunding::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn apply_staking_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `306`
		//  Estimated: `3771`
		// Minimum execution time: 27_247_000 picoseconds.
		Weight::from_parts(28_378_000, 3771)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `DepartmentFunding::ValidationBlock` (r:1 w:0)
	/// Proof: `DepartmentFunding::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `SortitionSumGame::SortitionSumTrees` (r:1 w:1)
	/// Proof: `SortitionSumGame::SortitionSumTrees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn apply_jurors() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `3908`
		// Minimum execution time: 36_855_000 picoseconds.
		Weight::from_parts(39_169_000, 3908)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `DepartmentFunding::ValidationBlock` (r:1 w:0)
	/// Proof: `DepartmentFunding::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:1)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::StakingStartTime` (r:1 w:0)
	/// Proof: `SchellingGameShared::StakingStartTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn pass_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `282`
		//  Estimated: `3747`
		// Minimum execution time: 20_613_000 picoseconds.
		Weight::from_parts(21_229_000, 3747)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `DepartmentFunding::ValidationBlock` (r:1 w:0)
	/// Proof: `DepartmentFunding::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::DrawsInRound` (r:1 w:1)
	/// Proof: `SchellingGameShared::DrawsInRound` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::Nonce` (r:1 w:1)
	/// Proof: `SchellingGameShared::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `RandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `RandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `SortitionSumGame::SortitionSumTrees` (r:1 w:1)
	/// Proof: `SortitionSumGame::SortitionSumTrees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::DrawnJurors` (r:1 w:1)
	/// Proof: `SchellingGameShared::DrawnJurors` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn draw_jurors() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2734`
		//  Estimated: `6199`
		// Minimum execution time: 163_900_000 picoseconds.
		Weight::from_parts(170_151_000, 6199)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `DepartmentFunding::ValidationBlock` (r:1 w:0)
	/// Proof: `DepartmentFunding::ValidationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::PeriodName` (r:1 w:0)
	/// Proof: `SchellingGameShared::PeriodName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::DrawnJurors` (r:1 w:0)
	/// Proof: `SchellingGameShared::DrawnJurors` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchellingGameShared::VoteCommits` (r:0 w:1)
	/// Proof: `SchellingGameShared::VoteCommits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn commit_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `613`
		//  Estimated: `4078`
		// Minimum execution time: 22_024_000 picoseconds.
		Weight::from_parts(22_581_000, 4078)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
